from django.db import models
from campaign.models import Campaign
from company.models import Company
from page.models import Page
from phrase.models import Phrase


ALERT_TYPES = (
    ('email', 'Email'),
    ('sms', 'SMS'),
    ('dashboard', 'Dashboard'),
)

class Alert(models.Model):
    """
    Alerts generated by Transparency
    """
    alert_type = models.CharField(max_length=10, choices=ALERT_TYPES) 
    date = models.DateTimeField(auto_now=True,auto_now_add=True)
    result = models.SmallIntegerField()
    #campaign_alert_id int(10) unsigned DEFAULT NULL
    sub_id_1 = models.CharField(max_length=255,blank=True)
    sub_id_2 = models.CharField(max_length=255,blank=True)
    sub_id_3 = models.CharField(max_length=255,blank=True)
    sub_id_4 = models.CharField(max_length=255,blank=True)
    email = models.EmailField(blank=True)
    phone = models.CharField(max_length=20,blank=True)
    campaign = models.ForeignKey(Campaign)
    affiliate = models.ForeignKey(Company)

    def __unicode__(self):
        return self.name

class Flag(models.Model):
    """
    Flag thrown by Transparency
    """
    sub_id_1 = models.CharField(max_length=255,blank=True)
    sub_id_2 = models.CharField(max_length=255,blank=True)
    sub_id_3 = models.CharField(max_length=255,blank=True)
    sub_id_4 = models.CharField(max_length=255,blank=True)
    #adv_actions_log_id int(10) unsigned DEFAULT NULL
    review = models.CharField(max_length=30,default='valid')
    status = models.CharField(max_length=30,default='pending')
    campaign = models.ForeignKey(Campaign)
    affiliate = models.ForeignKey(Company)
    
    class Meta:
        unique_together = ("campaign","affiliate","sub_id_1","sub_id_2","sub_id_3","sub_id_4")

    def __unicode__(self):
        return self.campaign

class Hit(models.Model):
    """
    Phrase Hit
    """
    phrase = models.ForeignKey(Phrase)
    flag = models.ForeignKey(Flag)
    page = models.ForeignKey(Page)
    #line_num int(11) DEFAULT NULL
    #line_src text
    #display_url_id int(11)  DEFAULT '0'

    def __unicode__(self):
        return self.phrase
